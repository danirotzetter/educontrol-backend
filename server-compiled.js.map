{"version":3,"sources":["server.js"],"names":[],"mappings":"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","file":"server-compiled.js","sourcesContent":["/**\r\n * Require libraries\r\n */\r\nconst express = require('express');\r\nconst bodyParser = require('body-parser');\r\nconst mongoose = require('mongoose'); // To simplify dealing with mongodb\r\nconst http = require('http'); // For base http operations\r\nconst config = require('./app/config.js'); // Loads the configuration\r\nconst app = express();\r\nconst router = express.Router(); // get an instance of the express Router\r\nvar morgan = require('morgan'); // Logging\r\nvar jwt = require('jsonwebtoken'); // used to create, sign, and verify tokens\r\nvar cors = require('cors'); // Allow cross-site requests\r\n\r\n\r\nconsole.log('Starting server in environment \"' + config.get('env') + '\"');\r\n\r\n/**\r\n * Configure the application\r\n */\r\napp.use(bodyParser.urlencoded({extended: true})); // Simplified body reading: adds <form> element data to the body\r\napp.use(bodyParser.json());\r\nif (config.get('dev')) {\r\n    app.use(morgan('dev'));// use morgan to log requests to the console\r\n}\r\napp.set('jsonTokenVerificationSecret', config.get('security:jsonTokenVerificationSecret')); // secret variable to verify JSON tokens\r\napp.use(cors()); // Allow cross-site requests\r\n\r\n/**\r\n * Load controllers\r\n */\r\nvar userCtrl = require('./controllers/user-ctrl.js');\r\nvar studentCtrl = require('./controllers/student-ctrl.js');\r\nvar teacherCtrl = require('./controllers/teacher-ctrl.js');\r\nvar courseCtrl = require('./controllers/course-ctrl.js');\r\n\r\n/**\r\n * ==================\r\n * START ROUTES\r\n * ==================\r\n */\r\n/**\r\n * Add routing middleware to require authentication and authorization\r\n */\r\nrouter.use(function (req, res, next) {\r\n\r\n    // Define routes that are accessible without authentication\r\n    var unauthAccess = [\r\n        '/users/login'\r\n    ];\r\n\r\n    console.log('Skip authentication? '+config.get('security:noAuthentication'));\r\n\r\n    /**\r\n     * Skip routes that require no authentication\r\n     * Skip authentication if defined so in the properties\r\n     */\r\n    if (unauthAccess.indexOf(req.url) >= 0 || config.get('security:noAuthentication')) {\r\n        // Allowed in any case, without authentication/ authorization\r\n        next();\r\n    }\r\n    else {\r\n        // Route that requires authentication\r\n\r\n        // check header or url parameters or post parameters for token\r\n        var token = req.body.token || req.query.token || req.headers['x-access-token'];\r\n\r\n        // decode token\r\n        if (token) {\r\n\r\n            // verifies secret and checks exp\r\n            jwt.verify(token, app.get('jsonTokenVerificationSecret'), function (err, decoded) {\r\n                if (err) {\r\n                    return res.json({success: false, message: 'Failed to authenticate token.'});\r\n                } else {\r\n                    // if everything is good, save to request for use in other routes\r\n                    req.decoded = decoded;\r\n                    next();\r\n                }\r\n            });\r\n\r\n        } else {\r\n            // if there is no token\r\n            // return an error\r\n            return res.status(403).send({\r\n                success: false,\r\n                message: 'No token provided.'\r\n            });\r\n\r\n        }\r\n    }\r\n});\r\n\r\nrouter.get('/', function (req, res) {\r\n    res.json({message: 'Please use an api call'});\r\n});\r\n// REGISTER ROUTES -------------------------------\r\napp.use('/', router);\r\napp.use('/users', userCtrl);\r\napp.use('/teachers', teacherCtrl);\r\napp.use('/students', studentCtrl);\r\napp.use('/courses', courseCtrl);\r\n\r\n/**\r\n * ==================\r\n * END ROUTES\r\n * ==================\r\n */\r\n\r\n\r\n/**\r\n * Launch the application if connection to MongoDB is successful\r\n */\r\nvar mongoDbUrl = 'mongodb://' + config.get('db:username') + ':' + config.get('db:password') + '@' + config.get('db:host') + ':' + config.get('db:port') + '/' + config.get('db:database');\r\nconsole.log('Attempt to connect to ' + mongoDbUrl);\r\nmongoose.Promise = global.Promise; // Use updated promise (without this setup, a deprecated warning from mongoose will show up)\r\nmongoose.connect(mongoDbUrl, (err, database) => {\r\n    // ... start the server\r\n    if (err) {\r\n        console.log('Cannot connect to database: ' + err);\r\n    }\r\n    else {\r\n        console.log('Successfully connected to database');\r\n    }\r\n\r\n    // Start listening\r\n    app.listen(config.get('app:port'), ()=> {\r\n        console.log('listening on port ' + config.get('app:port'))\r\n    });\r\n})\r\n;\r\n\r\n\r\n\r\n"]}